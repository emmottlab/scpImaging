% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{generateImageColumnsSCE}
\alias{generateImageColumnsSCE}
\alias{generateImageColumnsSCE,SummarizedExperiment-method}
\alias{generateImageColumnsSCE,QFeatures-method}
\title{'generateImageColumnsSCE():' Apply generateImageColumns to Bioconductor Object colData}
\usage{
generateImageColumnsSCE(x, ...)

\S4method{generateImageColumnsSCE}{SummarizedExperiment}(x, ...)

\S4method{generateImageColumnsSCE}{QFeatures}(x, ...)
}
\arguments{
\item{x}{A \code{SummarizedExperiment}, \code{SingleCellExperiment}, or \code{QFeatures} object.}

\item{...}{Arguments to be passed to the underlying \code{generateImageColumns} function
that operates on data.frames. This typically includes \code{source_column}
and \code{column_configs}.}
}
\value{
The input object (\code{x}) with its \code{colData} updated to include
the new columns.
}
\description{
A wrapper function to apply \code{generateImageColumns} (a function that processes
data.frames) to the \code{colData} of a \code{SummarizedExperiment}
(which includes \code{SingleCellExperiment}) or a \code{QFeatures} object.
It extracts the \code{colData}, processes it, and then updates the object's
\code{colData} with the new columns.
}
\details{
This function serves as a wrapper. The method for \code{SummarizedExperiment}
also handles \code{SingleCellExperiment} objects due to class inheritance.
For \code{QFeatures} objects, this function modifies the primary (global) \code{colData}
of the \code{QFeatures} object.

Refer to the documentation of the original \code{generateImageColumns} function
for details on its arguments and behavior when processing the data.frame.
}
\examples{
# --- Prerequisite: Define or load your original generateImageColumns function ---
# generateImageColumns <- function(data, source_column = "ImageFile", ...) {
#   # ... (your data.frame processing logic)
#   data$newCol <- paste0("processed_", data[[source_column]])
#   return(data)
# }

# --- Example for SummarizedExperiment (and by extension SingleCellExperiment) ---
library(SummarizedExperiment)
counts <- matrix(rnorm(40), ncol = 4)
rownames(counts) <- paste0("gene", 1:10)
colnames(counts) <- paste0("sample", 1:4)
sample_df <- S4Vectors::DataFrame(
  ImageFile = c("s1.png", "s2.png", "s3.png", "s4.png"),
  row.names = colnames(counts)
)
se <- SummarizedExperiment(assays = list(counts = counts), colData = sample_df)

# Assuming generateImageColumns and generateImageColumnsSCE are defined:
# print(colData(se))
# se_modified <- generateImageColumnsSCE(se, source_column = "ImageFile")
# print(colData(se_modified))

# If sce is a SingleCellExperiment, it would work the same:
# library(SingleCellExperiment)
# sce <- as(se, "SingleCellExperiment")
# sce_modified <- generateImageColumnsSCE(sce, source_column = "ImageFile")
# print(colData(sce_modified))

# --- Example for QFeatures ---
library(QFeatures)
qf_coldata <- S4Vectors::DataFrame(
  GlobalImageFile = c("q_s1.jpg", "q_s2.jpg"),
  Batch = c(1,2),
  row.names = c("qSample1", "qSample2")
)
# Creating a minimal QFeatures object for example
qf <- QFeatures(colData = qf_coldata) # No assays needed for this colData example

# print(colData(qf))
# qf_modified <- generateImageColumnsSCE(qf, source_column = "GlobalImageFile")
# print(colData(qf_modified))

}
\seealso{
\code{\link{generateImageColumns}} (for the underlying data.frame implementation)
}

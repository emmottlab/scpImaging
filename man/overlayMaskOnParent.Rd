% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imageProcessing.R
\name{overlayMaskOnParent}
\alias{overlayMaskOnParent}
\title{'overlayMaskOnParent()': Overlay Segmentation Masks onto Parent Images at Specific Coordinates}
\usage{
overlayMaskOnParent(
  parent_image_input,
  mask_input,
  coord_df,
  output_target,
  mode = c("outline", "overlay"),
  parent_image_suffix = "_Run.png",
  mask_suffix = "_cp_masks.png",
  output_suffix = "_Run_parent_overlayed.png",
  outline_col = "cyan",
  outline_lwd = 2,
  overlay_col = "yellow",
  overlay_alpha = 0.4
)
}
\arguments{
\item{parent_image_input}{Path to a directory containing the parent image files.}

\item{mask_input}{Path to a directory containing the segmentation mask files
(corresponding to cropped regions). Assumes mask names follow the pattern
cropped_ ... _cp_masks.png.}

\item{coord_df}{An R dataframe containing the mapping information. Must include
columns: 'ImageFile' (base name OR full filename used for parent files),
'X' (center x-coordinate of crop in parent), 'Y' (center y-coordinate of crop in parent). This
is produced as part of the cellenONE output, or can use an scpAnnotator file.}

\item{output_target}{Path to a directory where the composite parent images
(with overlays) will be saved.}

\item{mode}{Character string: "outline" or "overlay". Determines the
visualization style. Default is "outline".}

\item{parent_image_suffix}{Character string. Suffix expected for parent image
files (e.g., "_Run.png"). Used to find parent images and derive base names.
Default is "_Run.png".}

\item{mask_suffix}{Character string. The final suffix part of the mask filename
(e.g., "_cp_masks.png"). Default is "_cp_masks.png".}

\item{output_suffix}{Character string. Suffix appended to the determined parent
base name for the generated output files. Default is "_parent_overlayed.png". \strong{Strongly recommend} not changing.}

\item{outline_col}{Color for the outlines (used if mode="outline"). Default is "cyan".}

\item{outline_lwd}{Approximate line width (thickness) for outlines in pixels
(used if mode="outline"). Default is 2.}

\item{overlay_col}{Color for the overlay (used if mode="overlay"). Default is "yellow".}

\item{overlay_alpha}{Alpha transparency for the overlay (used if mode="overlay").
Default is 0.4.}
}
\value{
Invisibly returns a list of paths to the successfully created output files.
}
\description{
Reads parent microscopy images, corresponding segmentation masks
(which match cropped regions), and a dataframe specifying the crop coordinates (e.g.
a cellenONE cell sort file, or scpAnnotator file).
Creates output images showing the masks overlaid onto the parent images at the
correct locations, either as outlines or semi-transparent overlays.
Processes images in batches based on the parent image identifier found in the
coordinate dataframe.
}
\examples{
\dontrun{
# --- Setup Dummy Files/Dirs ---
if (requireNamespace("magick", quietly = TRUE) && requireNamespace("tools", quietly = TRUE)) {
# Create temp directories
temp_dir <- tempdir()
parent_dir <- file.path(temp_dir, "parent_images")
mask_dir <- file.path(temp_dir, "crop_masks")
out_dir <- file.path(temp_dir, "parent_output")
dir.create(parent_dir, showWarnings = FALSE)
dir.create(mask_dir, showWarnings = FALSE)
dir.create(out_dir, showWarnings = FALSE)

# Define suffixes
parent_suffix <- "_Run.png" # Suffix for the parent image
mask_suffix <- "_cp_masks.png" # Suffix for the mask image
output_suffix <- "final_overlay.png"

# Create dummy parent image
parent_base_name <- "Experiment1_Tile1"
parent_file_path <- file.path(parent_dir, paste0(parent_base_name, parent_suffix))
parent_img <- magick::image_blank(width = 500, height = 400, color = "grey80")
magick::image_write(parent_img, parent_file_path)

# Create dummy mask file following the specific pattern
# cropped[parent_base_name]Run[mask_suffix]
mask_file_name_actual <- paste0("cropped", parent_base_name, "_Run", mask_suffix)
mask_path <- file.path(mask_dir, mask_file_name_actual)
mask <- magick::image_blank(width = 50, height = 50, color = "black")
mask <- magick::image_draw(mask)
graphics::symbols(25, 25, circles = 15, inches = FALSE, add = TRUE, fg = "white", bg = "white")
grDevices::dev.off()
magick::image_write(mask, mask_path)

# --- Example: coord_df with FULL filenames (handled by modified script) ---
coord_data_full <- data.frame(
  ImageFile = c(paste0(parent_base_name, parent_suffix)), # Full filename identifier
  X = c(300),
  Y = c(250)
)

overlayMaskOnParent(
  parent_image_input = parent_dir,
  mask_input = mask_dir,
  coord_df = coord_data_full, # Use the dataframe with full filenames
  output_target = out_dir,
  mode = "outline",
  parent_image_suffix = parent_suffix, # e.g., "_Run.png"
  mask_suffix = mask_suffix,         # e.g., "_cp_masks.png"
  output_suffix = output_suffix,
  outline_col = "blue"
)
print(paste("Output (full name input) saved in:", out_dir))
list.files(out_dir) # Should show one file named Experiment1_Tile1_final_overlay.png

# --- Clean up ---
unlink(parent_dir, recursive = TRUE)
unlink(mask_dir, recursive = TRUE)
unlink(out_dir, recursive = TRUE)
} else {
message("Magick and/or tools package not installed. Examples cannot run.")
}
}
}

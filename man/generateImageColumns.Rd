% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{generateImageColumns}
\alias{generateImageColumns}
\title{generateImageColumns(): Generate Derived Image File Columns}
\usage{
generateImageColumns(data, source_column = "ImageFile", column_configs = NULL)
}
\arguments{
\item{data}{A \code{data.frame} or \code{tibble} containing the source image file information.}

\item{source_column}{Character string. The name of the column in \code{data} that
contains the source filenames (e.g., image paths). Defaults to "ImageFile".}

\item{column_configs}{An optional named list to override or add custom column
configurations. Each element of the list should be named (e.g., "Cropped",
"CP_Mask") and contain a sub-list with elements \code{col_name} (character, the
desired name for the new column), \code{prefix} (character, prefix to add,
can be \code{NA} or empty string for none), and \code{suffix} (character, suffix rule,
can be \code{NA} or empty string for none). Suffix rules starting with "replace "
(e.g., "replace.png with _mask.png") trigger string replacement; otherwise,
the suffix is appended before the original extension. Defaults to \code{NULL},
using the internal default configurations.}
}
\value{
The input \code{data} frame (\code{tibble}) with the newly generated columns added.
}
\description{
Takes an input data frame and adds new columns containing derived filenames
based on a specified source column. The derivation follows configurable
prefix and suffix rules, primarily designed for managing related image files
(e.g., cropped images, masks, overlays) in bioinformatics workflows.
}
\details{
The function iterates through a set of predefined or user-provided configurations
to generate new columns. Each configuration specifies the new column's name,
an optional prefix to prepend to the source filename's base name (preserving path and extension),
and an optional suffix rule applied before the original extension.

Default Configurations:
\itemize{
\item \strong{Cropped}: Adds column "Cropped" with prefix "cropped_" applied to the base filename.
\item \strong{CP_Mask}: Adds column "CP_Mask" with prefix "cropped_" applied to the base filename and replaces the ".png" extension/suffix within the entire string with "_cp_masks.png".
\item \strong{CP_Overlay}: Adds column "CP_Overlay" with prefix "cropped_" applied to the base filename and replaces the ".png" extension/suffix within the entire string with "_cp_masks_overlay.png".
\item \strong{CP_Overlay_Parent}: Adds column "CP_Overlay_Parent" appending the suffix "_parent_overlayed" before the original file extension.
}

The \code{column_configs} argument allows overriding these defaults. The names of the
list provided in \code{column_configs} should match the keys of the default configurations
(e.g., "Cropped", "CP_Mask") to override them. If a configuration name in
\code{column_configs} does not match a default, it defines a new derived column. Recommend
\strong{not} overriding the defaults.

Prefix rules add the specified string after any directory path but before the base filename.

Suffix rules are applied as follows:
\itemize{
\item If the \code{suffix} string starts with "replace ", the function attempts to
perform a string replacement on the \emph{entire} generated string (after prefixing). The format expected is "replace <old_string> with <new_string>".
For example, "replace.png with _mask.png". The replacement uses fixed string matching, not regular expressions.
\item Otherwise, the \code{suffix} string is appended to the filename's base name (after the prefix, if any) but \emph{before} the original file extension.
}

If the source filename is \code{NA}, the resulting derived filenames will also be \code{NA}.
If a "replace" suffix rule is specified but the \verb{<old_string>} is not found in a
given source filename, the replacement does not occur for that filename, and a single
warning summarizing all mismatches may be issued at the end.
Generated column names that clash with existing columns in \code{data} will overwrite them, issuing a warning.
}
\examples{
# Create a sample data frame
df <- data.frame(
  SampleID = 1:3,
  ImageFile = c(
    "path/subpath/458_Printed_T1_F1_R62_C19_(A-1)_Trans_samplename_Run.png",
    "another_image_file.tif",
    NA
  ),
  stringsAsFactors = FALSE
)

# Basic usage with defaults
result_default <- generateImageColumns(df)
print(result_default)

# Example with a different source column
df2 <- data.frame(
  ID = 1,
  OriginalPath = "path/to/image.png",
  stringsAsFactors = FALSE
)
result_source <- generateImageColumns(df2, source_column = "OriginalPath")
print(result_source)

# Example overriding defaults and adding a new column
custom_configs <- list(
  Cropped = list(col_name = "MyCropped", prefix = "mycrop_", suffix = NA),
  CP_Mask = list(col_name = "MaskFile", prefix = NA, suffix = "replace.png with _MASK.tif"),
  NewCol = list(col_name = "ExtraInfo", prefix = "info_", suffix = "_extra") # New column
)
result_custom <- generateImageColumns(df, column_configs = custom_configs)
print(result_custom)

# Example with suffix replacement mismatch (no ".png" in source)
df_mismatch <- data.frame(
  ImageFile = "image_no_png_suffix.jpeg",
  stringsAsFactors = FALSE
)
# CP_Mask and CP_Overlay rules won't replace ".png" and may trigger a warning
result_mismatch <- generateImageColumns(df_mismatch)
print(result_mismatch)

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imageProcessing.R
\name{overlayMask}
\alias{overlayMask}
\title{Overlay Segmentation Mask on Image (Single File or Directory)}
\usage{
overlayMask(
  image_input,
  mask_input,
  output_target,
  mode = c("outline", "overlay"),
  image_suffix = NULL,
  mask_suffix = "_cp_masks.png",
  output_suffix = "_cp_masks_overlay.png",
  outline_col = "cyan",
  outline_lwd = 2,
  overlay_col = "yellow",
  overlay_alpha = 0.4
)
}
\arguments{
\item{image_input}{Path to the original microscopy image file OR a directory
containing multiple image files.}

\item{mask_input}{Path to the segmentation mask image file OR a directory
containing multiple mask files. If \code{image_input} is a directory, \code{mask_input}
can be the same directory or a separate one.}

\item{output_target}{Path to save the resulting composite image file OR a
directory where multiple output images will be saved. If inputs are
directories, this must be a directory path.}

\item{mode}{Character string: "outline" or "overlay". Determines the
visualization style. Default is "outline".}

\item{image_suffix}{Character string or NULL. Suffix used to identify image
files when \code{image_input} is a directory. Required if \code{image_input} and
\code{mask_input} point to the same directory. Example: \code{"_Run.png"}. If NULL
and separate directories are used, attempts to match common image extensions.
Default is NULL.}

\item{mask_suffix}{Character string. Suffix used to identify mask files when
\code{mask_input} (or \code{image_input}) is a directory. Default is \code{"_cp_masks.png"}.}

\item{output_suffix}{Character string. Suffix used for the generated output
files. The mask file's \code{mask_suffix} will be replaced with this.
Default is \code{"_cp_masks_overlay.png"}.}

\item{outline_col}{Color for the outlines (used if mode="outline"). Can be any
format recognized by \code{magick}. Default is "cyan".}

\item{outline_lwd}{Approximate line width (thickness) for outlines in pixels
(used if mode="outline"). Default is 2.}

\item{overlay_col}{Color for the overlay (used if mode="overlay"). Can be any
format recognized by \code{magick}. Default is "yellow".}

\item{overlay_alpha}{Alpha transparency for the overlay (used if mode="overlay").
A numeric value between 0 (fully transparent) and 1 (fully opaque). Default is 0.4.}
}
\value{
Invisibly returns a list of paths to the successfully created output files.
}
\description{
Reads a microscopy image and a corresponding segmentation mask
(or directories containing multiple images/masks), then creates an output
image (or images) showing the mask as either outlines or a semi-transparent
overlay on the original image. Uses the 'magick' package. Console output
is minimized, primarily showing warnings for missing files or processing errors.
}
\examples{
\dontrun{
# --- Setup Dummy Files/Dirs ---
if (requireNamespace("magick", quietly = TRUE)) {
# Create temp directories
temp_dir <- tempdir()
img_dir <- file.path(temp_dir, "images")
mask_dir <- file.path(temp_dir, "masks")
out_dir <- file.path(temp_dir, "output")
dir.create(img_dir, showWarnings = FALSE)
dir.create(mask_dir, showWarnings = FALSE)
dir.create(out_dir, showWarnings = FALSE)

# Create dummy image/mask files (1 pair)
img_base1 <- "cell_image_A1"
img_suffix <- "_microscopy.png"
mask_suffix <- "_seg_mask.png"
img_path1 <- file.path(img_dir, paste0(img_base1, img_suffix))
mask_path1 <- file.path(mask_dir, paste0(img_base1, mask_suffix))

img <- magick::image_blank(width=50, height=50, color="grey")
mask <- magick::image_blank(width=50, height=50, color="black")
mask <- magick::image_draw(mask)
graphics::symbols(25, 25, circles=10, inches=FALSE, add=TRUE, fg="white", bg="white")
grDevices::dev.off()
magick::image_write(img, img_path1)
magick::image_write(mask, mask_path1)

# Create an image file without a corresponding mask
img_base_unmatched <- "unmatched_image"
img_path_unmatched <- file.path(img_dir, paste0(img_base_unmatched, img_suffix))
magick::image_write(img, img_path_unmatched)

# Create a mask file without a corresponding image
mask_base_unmatched <- "unmatched_mask"
mask_path_unmatched <- file.path(mask_dir, paste0(mask_base_unmatched, mask_suffix))
magick::image_write(mask, mask_path_unmatched)

# --- Example 1: Single File Mode (should be quiet) ---
out_single_file <- file.path(out_dir, "single_overlay.png")
overlayMask(img_path1, mask_path1, out_single_file, mode = "overlay")

# --- Example 2: Directory Mode (should warn about unmatched files) ---
overlayMask(image_input = img_dir,
mask_input = mask_dir,
output_target = out_dir,
mode = "outline",
image_suffix = img_suffix, # Specify suffixes
mask_suffix = mask_suffix,
output_suffix = "_outline_overlay.png",
outline_col = "red")

# --- Clean up ---
unlink(img_dir, recursive = TRUE)
unlink(mask_dir, recursive = TRUE)
unlink(out_dir, recursive = TRUE)
} else {
message("Magick package not installed. Examples cannot run.")
}
}
}

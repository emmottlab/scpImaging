% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imageProcessing.R
\name{npy_masks_to_png}
\alias{npy_masks_to_png}
\title{'npy_masks_to_png()' converts Cellpose.npy Masks to PNG Images}
\usage{
npy_masks_to_png(
  input_dir,
  output_dir = NULL,
  input_suffix = "_seg\\\\.npy$",
  output_suffix = "_cp_masks.png"
)
}
\arguments{
\item{input_dir}{Character string. Path to the directory containing.npy files.}

\item{output_dir}{Optional character string. Path to the directory where PNG files
will be saved. If NULL (default), PNG files are saved in \code{input_dir}.
The directory will be created if it doesn't exist.}

\item{input_suffix}{Optional character string. A regular expression specifying the
ending pattern of input files to process. Defaults to "_seg\\\\.npy$".}

\item{output_suffix}{Optional character string. Suffix to use for the output PNG
files (including the '.png' extension). Defaults to "_cp_masks.png".}
}
\value{
Invisibly returns a list containing vectors of successfully processed
input file paths (\code{success}) and a list of errors encountered (\code{errors}),
where names are input file paths and values are error messages. Primarily
called for its side effect of writing PNG files.
}
\description{
Reads.npy segmentation files #' extracts the mask data, generates a pseudo-colored representation,
and saves the masks as PNG images using the magick package.
}
\details{
This function requires the 'reticulate' and 'magick' packages.
It also depends on a Python environment accessible by 'reticulate'
with the 'numpy' library installed. The function assumes the.npy files
contain pickled Python objects loadable with \code{numpy.load(..., allow_pickle=TRUE)}
and that the loaded object is a dictionary (or similar structure)
containing an element named 'masks' which holds the integer segmentation mask array.
A unique color (plus black for background ID 0) is assigned to each segment ID
found in the mask array using \code{grDevices::rainbow()}.
}
\examples{
\dontshow{if (reticulate::py_available(initialize = TRUE) && reticulate::py_module_available("numpy")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Setup: Create temporary directories and a dummy.npy file
temp_in_dir <- tempfile("input_dir_")
temp_out_dir <- tempfile("output_dir_")
dir.create(temp_in_dir)
dir.create(temp_out_dir)

# Create a dummy mask array (e.g., 3x4 with segments 1, 2, 3)
dummy_masks <- array(as.integer(c(0,1,1,0, 2,2,0,2, 0,3,3,0)), dim = c(3, 4))
# Create the dictionary structure expected within the.npy
dummy_data_to_save <- reticulate::dict("masks" = dummy_masks)

# Save the dummy data to a.npy file using numpy via reticulate
np <- reticulate::import("numpy")
npy_path <- file.path(temp_in_dir, "example_seg.npy")
tryCatch({
  np$save(npy_path, dummy_data_to_save)

  # Run the conversion function
  results <- npy_masks_to_png(input_dir = temp_in_dir, output_dir = temp_out_dir)

  # Check results (output file should exist)
  print(list.files(temp_out_dir))
  print(results)

}, error = function(e) {
  message("Example skipped: numpy unavailable or failed to save file.")
})

# Cleanup
unlink(temp_in_dir, recursive = TRUE, force = TRUE)
unlink(temp_out_dir, recursive = TRUE, force = TRUE)
\dontshow{\}) # examplesIf}
}

# Workflow name
name: R Package Check

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Permissions needed by the workflow
permissions:
  contents: read # Allow actions/checkout to read the repository content

# Define jobs
jobs:
  R-CMD-check:
    # Strategy matrix to run jobs on multiple OSs and R versions
    strategy:
      fail-fast: false # Prevent other jobs from being cancelled if one fails
      matrix:
        config:
          # Define combinations of OS and R versions
          # - 'release' is usually the latest stable R version
          # - 'devel' is the development version of R
          # - You can add specific versions like '4.3', '4.2' if needed and available
          - { os: ubuntu-latest, r: 'release' }
          - { os: macos-latest,  r: 'release' }
          - { os: windows-latest,r: 'release' }
          # Optionally add older or development versions:
          # - { os: ubuntu-latest, r: 'oldrel-1' } # Previous minor release
          # - { os: ubuntu-latest, r: 'devel' }

    # The type of runner that the job will run on
    runs-on: ${{ matrix.config.os }}

    # Name the job based on the matrix configuration for clarity in UI
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Check-out the repository under $GITHUB_WORKSPACE
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up R using r-lib/actions
      - name: Set up R ${{ matrix.config.r }}
        uses: r-lib/actions/setup-r@v2 # Correct path for setup-r
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true # Use public RStudio Package Manager for faster binary installs

      # 3. Set up system dependencies (important for cross-platform compatibility)
      #    This action queries the R package DESCRIPTION for SystemRequirements
      - name: Install system dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        uses: r-lib/actions/setup-r-dependencies@v2 # Correct path for setup-r-dependencies
        with:
          pak-version: devel
          extra-packages: |
            any::rcmdcheck
          needs: check

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        uses: r-lib/actions/setup-r-dependencies@v2 # Correct path for setup-r-dependencies
        with:
          pak-version: devel
          extra-packages: |
            local::.
            any::rcmdcheck
          needs: check

      # 4. Set up pak package manager
      - name: Setup pak
        uses: r-lib/actions/setup-pak@v2 # <<< CORRECTED PATH HERE
        with:
          pak-version: devel

      # 5. Install R package dependencies using pak
      - name: Install package dependencies
        run: |
          options(crayon.enabled = TRUE)
          # Ensure rcmdcheck is installed via pak if not caught by setup-r-dependencies extra-packages
          pak::pkg_install(pkg = "rcmdcheck", upgrade = TRUE)
          # Install dependencies of the local package
          pak::local_install_dev_deps(upgrade = TRUE)
        shell: Rscript {0}

      # 6. Run R CMD check
      - name: Check package
        env:
          # Prevent ansi colors messing up check logs
          R_CLI_NUM_COLORS: 0
          # Use more comprehensive check arguments, similar to CRAN
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          # Check results are saved to the 'check' directory
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # 7. (Optional but Recommended) Upload check results
      - name: Upload check results
        if: failure() # Only upload if the check step failed
        uses: actions/
